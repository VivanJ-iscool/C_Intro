// #include <stdio.h>
// int main(){
//     int a = 1000;
//     int b = 2342;
//     int c = a - b;
//     printf("Here's the difference to a random equation: %d-%d= %d", a,b,c);
// }



// #include <stdio.h>

// int main() {

//     int booksSold = 100;
//     double bookCost = 9.99;
//     double pre_totalSalesValue;
//     double post_totalSalesValue;

//     // Make your changes here
//     booksSold = 200;
//     pre_totalSalesValue = bookCost * booksSold;
//     post_totalSalesValue = pre_totalSalesValue / 2;

//     // Output logic, no need to change this
    
//     printf("You sold %d books and your take home was $%.2f\n", booksSold, post_totalSalesValue);
// }


// #include <stdio.h>
// int main() {
    
//     int endingDayOfWeek = 23 % 7;
//     int daysThatPass = 23;
//     int daysInWeek = 7;

//     printf("You started on the 1st (0) day of the week, went %d days from this, so it is now the %d day of the week\n", daysThatPass, endingDayOfWeek);
// }



//there are specific increments to increase and decrese things; like to add or subtract 1, you would use ++ or -- after calling a variable

//example: int b = 1;  b++;  <--this would make b have a value of 2

// #include <stdio.h>
// int main(){
    
//     int n = 13;
//     int m = 10;
//     n++; /*<-- adding one to 13*/
//     m--; /*<-- subtracting one from 10*/


//     printf("The variable m = %d\n", m);
//     printf("The variable n = %d", n);
// }


//You can do some similar things with +=, -=, *= and /=. These allow you to shortcut adding different variables

//Example: int a = 2;  int b = 6;  a-=b;  <-- This is a shortcut to a = a - b


// #include <stdio.h>
// int main(){
//     int timeServerCrashed = 5;
//     double losses = 500.95;

//     losses *= timeServerCrashed;
//     losses /= 2;

//     printf("Total Losses: $%.2f\n", losses);

// }


//The following is simple bolean logic w/ if statements (true and false code :P)

//*keep in mind that if statement codintions are in brackets


// #include <stdio.h>
// int main(){

//     int x = 5;
//     int y = 34;

//     if (x != y){
//         printf("You did em' comparisions right! Good Boyyyyy");
//     }

// }


//examples of logical operations

// #include <stdio.h>
// int main(){
//     int a = 3;
//     int b = 9;

//     /*&& stands for and; || stands for or*/
//     if (a == b && a==2){
//         printf("both are true\n");
//     }

//     if (a == b || a == 2){
//         printf("one or more are true (aka a or b are true)\n");
//     }

//     if (!(a==b)) {
//         printf("they aren't equal\n");
//     }
// }



// #include <stdio.h>
// int main(){
//     int x = 1;
//     int y = 27;

//     if (!(x == y)){
//         printf("Good job! You set this comparision correctly.\n");
//     }
    
//     else {
//         printf("Please try again!\n");
//     }

// }


#include <stdio.h>
int main() {
    
    int x;
    int y;
    x = (2 + 3) * 5;
    y = 2 / (4 + 6);
    
    printf("x is: %d\n", x);
    printf("y is: %d\n", y);

}






//QUIZ FOR OPERATORS

//1. The answer is b.

//2. The true or false statement is false.

//3. ==

//4. The answer is d.

//5. The answer is c.

//6. *= 2

//7. ||

//8. The answer is a.

//9. The answer is b.

//10. ++

